import math
from seal import *
from seal_helper import *

import copy


def thesis_demo():

    dimension = 15
    # inputs = [0.1,	0.1, 0.1, 0.2, 0.0, 0.0, 0.2, 0.3, 0.1,	0.9, -0.3, 0.8,	0.2, 0.6, 0.0]
    inputs = [0.1, 0.0, 0.1, 0.2, 0.0, 0.0, 0.2, 0.1, 0.3, 1.0, 0.1, 0.7, 0.1, 0.5, -0.3]
    


    print_example_banner("Example: CKKS Basics")

    parms = EncryptionParameters(scheme_type.CKKS)  

    poly_modulus_degree = 8192
    my_scale = 30
    last_plain_scale = 20

    parms.set_poly_modulus_degree(poly_modulus_degree)
    parms.set_coeff_modulus(CoeffModulus.Create(
        poly_modulus_degree, [60, my_scale, my_scale, 60]))

    scale = pow(2.0, my_scale)

    context = SEALContext.Create(parms)
    print_parameters(context)

    keygen = KeyGenerator(context)
    public_key = keygen.public_key()
    secret_key = keygen.secret_key()
    relin_keys = keygen.relin_keys()

    encryptor = Encryptor(context, public_key)
    evaluator = Evaluator(context)
    decryptor = Decryptor(context, secret_key)

    encoder = CKKSEncoder(context)

    ptxt_vec = Plaintext()
    vrep = DoubleVector()
    for i in range(encoder.slot_count()):
        vrep.append(inputs[i % len(inputs)])
    # print(vrep)
    encoder.encode(vrep, scale, ptxt_vec)



    rots = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048 ]
    # galk = GaloisKeys()
    galk = keygen.galois_keys(rots)
    
    ct = Ciphertext()
    encryptor.encrypt(ptxt_vec, ct)
    
    # W1 = [-0.025333336, 0.073584445, -0.047216613, 0.18591905, -0.27542248, -0.26681134, -0.13765217, -0.30428806, -0.038901206, 0.25725207, -0.5916338, 0.09984007, 0.1206389, 0.3703078, 0.15509297,
	# 	-0.55778956, -0.17159624, 0.38206482, 0.13647152, 0.0995081, -0.3261224, 0.2189282, -0.16601436, -0.67777795, -0.1130371, 0.3754611, 0.44521803, 0.72404045, -0.1283232, -0.2106342,
	# 	-0.2291026, -0.28999028, -0.074098386, 0.04094153, -0.042301573, 0.25317937, 0.37873283, 0.2503846, -0.4239971, -0.21063337, 0.2852935, 0.097197294, 0.3400989, -0.18595406, 0.16901167,
	# 	0.2522885, 0.4970716, 0.37312597, 0.048000038, 0.5327202, 0.44213235, 0.530003, 0.15933378, 0.33316433, -0.027760876, -0.43822733, 0.33508095, -1.0097011, 0.17022005, 0.19332814,
	# 	0.09802045, 0.34931612, 0.060469475, -0.16971138, -0.123592965, 0.18276687, -0.058420308, 0.26680708, -0.13068433, -0.14461695, -0.017179696, 0.011078397, 0.21604314, -0.27519697, 0.0110200895,
	# 	0.13122348, -0.059484687, 0.096138574, -0.29075062, 0.15073052, 0.42238045, -0.47537068, -0.10458778, -0.3407887, -0.024293313, -0.38392445, 0.0989361, -0.22327657, -0.44290423, 0.59593815,
	# 	-0.30866915, 0.06554472, 0.38248485, -0.26349783, -0.14231941, 0.13525532, -0.3736084, 0.022258941, -0.2930561, -0.3102283, 0.23081024, 0.47965708, 0.4476767, -0.2579037, -0.33573648,
	# 	0.28718016, 0.10692868, -0.0071940785, -0.8159498, 0.25386295, -0.3442934, 0.29050693, -0.41159427, 0.006808188, 0.22295325, -0.8941154, -0.18905659, 0.68109876, 0.28735676, 0.57250553,
	# 	0.15508257, -0.44993335, -0.0030782288, 0.47826147, 0.03962607, -0.011574908, 0.19096713, -0.22766003, 0.059436586, -0.45667365, 0.14223288, -0.45295087, 0.22760722, -0.16525385, -0.2809916,
	# 	0.021617135, 0.06444773, 0.03918349, -0.5673659, 0.8547465, 0.39732796, 0.33035442, -0.21018693, -0.2444701, 0.14366002, 0.16905534, 0.30867127, -0.6301036, 0.32456818, -0.2582209,
	# 	0.4032922, 0.08884215, -0.06644534, 0.16699135, 0.34281743, -0.2986736, -0.35754183, 0.17512605, 0.014519709, 0.34727925, -0.24234116, -0.08042996, -0.2938454, 0.057571694, -0.27575392,
	# 	-0.132408, -0.37733278, -0.20398894, 0.04746109, -0.6032878, 0.109729335, -0.1519245, -0.046319053, -0.30876762, -0.5107319, 0.025014566, -0.11452477, -0.14678663, 0.04716572, 0.5463345,
	# 	0.2238921, 0.43399185, 0.5753054, -0.18898354, 0.13639876, -0.15816061, -0.709152, -0.6216493, -0.32722148, -0.41932252, -0.043735396, 0.20394823, -0.5601734, -0.159232, 0.37627903,
	# 	-0.3102346, 0.3860459, -0.28035825, -0.41002125, -0.11171717, 0.15488632, -0.027155733, 0.42862874, -0.3164006, -0.08545141, 0.16562197, -0.1821526, -0.17811409, -0.2897358, -0.057849944,
	# 	-0.022295434, -0.1930951, -0.46937007, 0.32667413, 0.08007005, 0.32981986, 0.36812696, -0.30101386, -0.7164563, -0.36006156, -0.0005819032, 0.12393838, -0.068327844, 0.49282062, 0.60623616]

    # M = [[0.0]*dimension for i in range(dimension)]
    # k = 0
    # for i in range(dimension):
    #     for j in range(dimension):
    #         M[i][j] = W1[k]
    #         k += 1

    M = [[-2.89836496e-01,  3.87355804e-01,  2.65274346e-01,
        -2.76777178e-01, -3.25441122e-01,  1.14012286e-01,
        -1.62492245e-01, -3.73531789e-01,  1.75427303e-01,
         4.26632017e-01,  1.70149073e-01, -1.19347364e-01,
         2.17084154e-01,  1.21633440e-01,  3.39576095e-01],
       [-5.01048565e-01, -1.32870793e-01,  3.01246554e-01,
        -2.03692541e-02, -2.89003044e-01,  4.25097793e-01,
        -1.02179274e-01,  2.11939812e-01, -3.14634800e-01,
        -1.76743329e-01,  4.26548749e-01, -1.31165743e-01,
         2.43478343e-02, -1.03371270e-01,  2.33712733e-01],
       [ 9.47544277e-02, -4.37609434e-01, -3.33830081e-02,
         1.55124694e-01,  2.81807005e-01,  4.08755958e-01,
         7.30708316e-02, -5.15033364e-01,  3.25918913e-01,
        -2.80165672e-01,  4.31418091e-01, -4.53342438e-01,
         1.11733295e-01, -2.70913899e-01,  2.42239565e-01],
       [-2.04722285e-01,  4.81839895e-01, -1.17049009e-01,
         2.35141635e-01,  4.21644747e-01, -7.47237429e-02,
        -2.75287211e-01, -2.44359031e-01,  4.00017530e-01,
        -2.25485250e-01,  1.14737749e-01,  3.69056970e-01,
        -2.20217556e-01,  3.43597740e-01,  4.02867436e-01],
       [-2.39298224e-01,  7.04106390e-02,  3.55858177e-01,
         2.62964368e-01, -1.80438608e-01, -5.02171740e-02,
         3.97246659e-01,  2.82521844e-01, -2.77690530e-01,
        -9.32454392e-02, -3.48471373e-01, -3.77035737e-01,
        -2.57528841e-01, -1.14522176e-02,  6.19999543e-02],
       [ 4.82986420e-01,  4.31366056e-01, -2.50826687e-01,
        -1.89098224e-01,  1.72279283e-01,  5.97740300e-02,
         7.87945092e-02,  4.52535629e-01,  1.05503514e-01,
         3.22871566e-01, -9.22002718e-02,  3.04017514e-01,
         3.16240728e-01, -1.31422967e-01, -1.84663698e-01],
       [-1.40256912e-01,  4.84050065e-01,  4.75249529e-01,
         3.81228358e-01,  2.10004836e-01,  4.87733245e-01,
        -3.63216728e-01,  1.83701113e-01,  2.40793854e-01,
        -2.31928900e-01, -1.79626331e-01, -1.92631651e-02,
        -4.01965350e-01,  4.86146212e-01,  3.91552001e-01],
       [-1.11439385e-01, -3.75387728e-01,  3.34337711e-01,
         3.36404711e-01, -2.93878287e-01, -2.25986913e-01,
         1.03150673e-01,  3.82585488e-02,  8.13217983e-02,
        -1.28525496e-01,  3.53893608e-01, -4.46447581e-01,
         3.44678044e-01, -2.31496692e-01, -2.68364251e-01],
       [-8.06609094e-02, -4.43813294e-01, -3.51979911e-01,
         3.38455945e-01,  2.38592610e-01,  4.23730820e-01,
         5.99066988e-02,  1.83442891e-01, -1.54931217e-01,
         2.31066742e-03,  6.44617900e-02,  2.38490149e-01,
         2.70635158e-01, -1.06634334e-01, -3.81875932e-01],
       [-1.38092577e-01,  1.88615806e-02,  1.60330907e-01,
        -2.18221650e-01,  2.57766753e-01, -1.14853367e-01,
        -3.62161219e-01,  6.69704899e-02, -1.19418889e-01,
         9.38901305e-02,  4.90033299e-01, -1.31426752e-01,
         4.94135427e-04, -4.18933094e-01,  5.24975127e-03],
       [-2.39503607e-01, -3.40339720e-01,  9.55762044e-02,
         2.18030587e-01, -8.44534039e-02,  1.00827493e-01,
        -2.86453545e-01,  1.64353803e-01, -1.61164641e-01,
         1.29064560e-01,  2.91776389e-01,  3.61707866e-01,
        -2.22786382e-01,  3.45864981e-01, -3.28478605e-01],
       [ 2.56562591e-01,  7.58585781e-02, -2.80641496e-01,
         2.29085848e-01, -5.12393594e-01, -4.67298865e-01,
         4.06522378e-02,  5.29177725e-01,  3.03298950e-01,
         3.92469347e-01,  2.88476497e-01, -1.49507925e-01,
         1.21286958e-01,  2.08669037e-01, -3.74385238e-01],
       [ 2.36188211e-02,  6.29496798e-02, -2.01325923e-01,
        -1.46088928e-01, -1.55698180e-01, -2.34861225e-01,
         2.34554172e-01,  1.34905353e-01,  2.49772761e-02,
         1.77108169e-01, -3.52407575e-01, -7.10109994e-02,
         2.97315955e-01, -2.90497869e-01, -2.23653674e-01],
       [-3.51040848e-02, -1.81681409e-01, -4.16042477e-01,
         3.78549010e-01,  3.40796441e-01,  3.82195055e-01,
        -1.97194502e-01,  2.26721779e-01,  3.21013778e-01,
         4.54799563e-01,  3.03962111e-01, -3.50247532e-01,
         4.35093284e-01, -5.69420010e-02,  3.77224982e-01],
       [ 1.56244546e-01, -4.48458344e-01, -4.38002527e-01,
         1.01235025e-01, -2.16426849e-01,  2.94285446e-01,
         4.17019963e-01, -1.96694627e-01,  3.27643216e-01,
         1.24752909e-01,  2.65740871e-01, -1.57868072e-01,
         3.16602141e-01, -6.47001266e-02, -2.91483104e-01]]

    
    # print(M)
    
    
    # W2 = DoubleVector([0.26412928, -0.72620237, -0.2765369, 0.21038327, -0.2737655, 0.2065479, -0.044716638, 0.55226415, 0.27009615, 0.15876967, -0.4926302, 0.14893562, 0.69126004, -0.051137313, -0.6713028])
    
    W2 = DoubleVector([ 3.4290832e-01,
         2.6946303e-01,
         8.8753179e-02,
        -3.8066599e-01,
        -5.2195883e-01,
         2.2549191e-01,
        -6.9451854e-02,
         3.1007338e-01,
        -3.8694140e-01,
         4.2528558e-01,
         3.0466713e-04,
         3.7811303e-01,
         4.6854535e-01,
         5.9482163e-01,
        -3.0144951e-01])

        
    # b1 = DoubleVector([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    # b2 = 0.0
    
    b1 = DoubleVector([0.02627805, -0.07758526, -0.10216836,  0.06576435,  0.03463504,
         0.0688474 ,  0.02702738, -0.04757165, -0.04963763, -0.08329879,
         0.04142958,  0.0596247 ,  0.03827906,  0.03710658, -0.04484239])
    b2 = 0.04463819

    
    ##### TEST
    Mv = [0.0]*dimension
    
    for i in range(dimension):
        for j in range(dimension):
            
            Mv[i] += M[i][j] * inputs[j]
            
    
    for j in range(dimension):
        Mv[j] = Mv[j] + b1[j]

    for j in range(dimension):
        Mv[j] = Mv[j] * Mv[j]

    sum = 0.0
    for j in range(dimension):
        Mv[j] = Mv[j] * W2[j]
        sum += Mv[j]
    sum += b2
    #####

    W2_plaintext = Plaintext()
    b1_plaintext = Plaintext()
    b2_plaintext = Plaintext()

    ptxt_diag = [Plaintext() for i in range(dimension)]
    for i in range(dimension):
        
        diag = DoubleVector()
        for j in range(dimension):
            diag.append(M[j][(j+i) % dimension])
        
        encoder.encode(diag, scale, ptxt_diag[i])
        # print(id(ptxt_diag[i]))
    # print(math.log(ptxt_vec.scale(),2))
    
    temp = Ciphertext()
    temp2 = Ciphertext(ct)
    enc_result = Ciphertext()
    # print(id(temp2))
    # print(id(ct))
    # print(temp2.parms_id())
    # print(ct.parms_id())
    print("Homomorphic circuit:")

    for i in range(dimension):
        temp = Ciphertext(temp2)
        evaluator.multiply_plain_inplace(temp, ptxt_diag[i])
        if i == 0:
            enc_result = Ciphertext(temp)
        else:
            evaluator.add_inplace(enc_result, temp)
        evaluator.rotate_vector(temp2, 1, galk, temp2)
    

    evaluator.rescale_to_next_inplace(enc_result)
    enc_result.scale(pow(2.0, my_scale))
    # print(enc_result.scale())
    encoder.encode(b1, enc_result.parms_id(), scale, b1_plaintext)
    # print(b1_plaintext.scale())
    evaluator.add_plain_inplace(enc_result, b1_plaintext)

    evaluator.square(enc_result, enc_result)
    evaluator.relinearize_inplace(enc_result, relin_keys)
    evaluator.rescale_to_next_inplace(enc_result)
    enc_result.scale(pow(2.0, my_scale))

    encoder.encode(W2, enc_result.parms_id(), pow(2.0, last_plain_scale), W2_plaintext)
    evaluator.multiply_plain_inplace(enc_result, W2_plaintext)

    temp_ct = Ciphertext()
    _iter = 1
    
    while _iter <= encoder.slot_count()/2:
        
        evaluator.rotate_vector(enc_result, _iter, galk, temp_ct)
        evaluator.add_inplace(enc_result, temp_ct)
        _iter <<= 1
        
    
    encoder.encode(b2, enc_result.parms_id(), enc_result.scale(), b2_plaintext)
    evaluator.add_plain_inplace(enc_result, b2_plaintext)


    plain_result = Plaintext()
    result = DoubleVector()
    
    decryptor.decrypt(enc_result, plain_result)
    encoder.decode(plain_result, result)

    print(result[0])
    print(sum)


if __name__ == '__main__':
    thesis_demo()
